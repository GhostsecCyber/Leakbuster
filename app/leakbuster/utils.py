import os
from flask import abort, json
import random
from werkzeug.exceptions import default_exceptions


def handle_any_exception(e):
    response = e.get_response()
    response.data = json.dumps({
        "code": e.code,
        "name": e.name,
        "Message": e.description,
    })
    response.content_type = "application/json"
    return response


def register_error_handlers(app):
    for ex in default_exceptions:
        app.register_error_handler(ex, handle_any_exception)


def config_APP(app):

    AES_KEY = os.environ.get('AES_KEY', get_random_string(16))

    if len(AES_KEY) != 16:
        print('Wrong AES_KEY, this key need to have 16 char length')
        exit()

    env = os.environ.get('FLASK_ENV', 'development')
    if env == 'testing':
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
    else:
        app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://{os.getenv("MYSQL_USER")}:' \
                                                f'{os.getenv("MYSQL_PASSWORD")}' \
                                                f'@{os.getenv("MYSQL_HOST")}/' \
                                                f'{os.getenv("MYSQL_DATABASE")}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = AES_KEY
    return


def get_random_string(length):
    # result_str store the string generated by this code
    sample_letters = 'adcdefghijklmnopkrstuvxwyzADCDEFGHIJKLMNOPKRSTUVXWYZ1234567890'
    result_str = ''.join((random.choice(sample_letters) for i in range(length)))
    return result_str


def is_user_or_is_admin(user, id):
    if user.id == id:
        return True
    else:
        abort(401)
